name: AI Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai_service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ai_service/**'
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ai-service

jobs:
  # Version Management
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ai_service/package-lock.json

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate version
        id: version
        run: |
          cd ai_service
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            COMMIT_COUNT=$(git rev-list --count HEAD)
            VERSION="0.1.${COMMIT_COUNT}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Update package.json version
        run: |
          cd ai_service
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Commit version changes
        run: |
          git add ai_service/package.json
          git commit -m "chore: bump ai-service version to ${{ steps.version.outputs.version }}"
          git push

  # Testing
  test:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ai_service/package-lock.json

      - name: Install dependencies
        run: |
          cd ai_service
          npm ci

      - name: Run linting
        run: |
          cd ai_service
          npm run lint

      - name: Run security audit
        run: |
          cd ai_service
          npm audit --audit-level=moderate

      - name: Run unit tests
        run: |
          cd ai_service
          npm run test:unit
        env:
          NODE_ENV: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}

      - name: Run integration tests
        run: |
          cd ai_service
          npm run test:integration
        env:
          NODE_ENV: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ai_service/coverage/lcov.info
          flags: ai-service
          name: ai-service-coverage

  # Security scanning
  security:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'ai_service/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker image
  build:
    needs: [version, test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai_service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ai-service version ${{ needs.version.outputs.version }} to staging"

  # Deploy to production
  deploy-production:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ai-service version ${{ needs.version.outputs.version }} to production"

  # Notifications
  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ AI Service CI/CD completed successfully"
          echo "Version: ${{ needs.version.outputs.version }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ AI Service CI/CD failed"
          echo "Version: ${{ needs.version.outputs.version }}"
